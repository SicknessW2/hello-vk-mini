{"version":3,"sources":["../../../../src/components/ConfigProvider/ConfigProvider.tsx"],"names":["React","PropTypes","vkConnect","canUseDOM","ConfigProvider","props","context","setScheme","document","window","body","mapOldScheme","scheme","target","setAttribute","prevProps","isWebView","webviewType","app","children","Component","bool","string","oneOf","object"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAuC,YAAvC;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEA,SAASC,SAAT,QAA0B,eAA1B;;IAwBqBC,c;;;;;AACnB,0BAAYC,KAAZ,EAAwCC,OAAxC,EAAwE;AAAA;;AAAA;;AACtE,wFAAMD,KAAN;;AACA,QAAIF,SAAJ,EAAe;AACb,YAAKI,SAAL,CAAe,CAACD,OAAO,CAACE,QAAR,IAAoBC,MAAM,CAACD,QAA5B,EAAsCE,IAArD,EAA2D,MAAKC,YAAL,CAAkBN,KAAK,CAACO,MAAxB,CAA3D;AACD;;AAJqE;AAKvE;;;;iCAuBYA,M,EAAuC;AAClD,cAAQA,MAAR;AACE,aAAK,cAAL;AACE,iBAAO,cAAP;;AACF,aAAK,aAAL;AACE,iBAAO,YAAP;;AACF;AACE,iBAAOA,MAAP;AANJ;AAQD;;;8BAESC,M,EAAqBD,M,EAAuC;AACpEC,MAAAA,MAAM,CAACC,YAAP,CAAoB,QAApB,EAA8BF,MAA9B;AACD;;;uCAEkBG,S,EAAgC;AACjD,UAAIA,SAAS,CAACH,MAAV,KAAqB,KAAKP,KAAL,CAAWO,MAApC,EAA4C;AAC1C,aAAKL,SAAL,CAAe,KAAKC,QAAL,CAAcE,IAA7B,EAAmC,KAAKC,YAAL,CAAkB,KAAKN,KAAL,CAAWO,MAA7B,CAAnC;AACD;AACF;;;sCAEsC;AACrC,aAAO;AACLI,QAAAA,SAAS,EAAE,KAAKX,KAAL,CAAWW,SADjB;AAELC,QAAAA,WAAW,EAAE,KAAKZ,KAAL,CAAWY,WAFnB;AAGLL,QAAAA,MAAM,EAAE,KAAKP,KAAL,CAAWO,MAHd;AAILM,QAAAA,GAAG,EAAE,KAAKb,KAAL,CAAWa;AAJX,OAAP;AAMD;;;6BAEQ;AACP,aAAO,KAAKb,KAAL,CAAWc,QAAlB;AACD;;;wBApCwB;AACvB,aAAO,KAAKb,OAAL,CAAaE,QAAb,IAAyBC,MAAM,CAACD,QAAvC;AACD;;;;EA3ByCR,KAAK,CAACoB,S;;gBAA7BhB,c,uBAQwC;AACzDY,EAAAA,SAAS,EAAEf,SAAS,CAACoB,IADoC;AAEzDT,EAAAA,MAAM,EAAEX,SAAS,CAACqB,MAFuC;AAGzDL,EAAAA,WAAW,EAAEhB,SAAS,CAACsB,KAAV,CAAgB,CAAC,QAAD,EAAW,UAAX,CAAhB,CAH4C;AAIzDL,EAAAA,GAAG,EAAEjB,SAAS,CAACqB;AAJ0C,C;;gBARxClB,c,kBAewB;AACzCa,EAAAA,WAAW,EAAE,UAD4B;AAEzCD,EAAAA,SAAS,EAAEd,SAAS,CAACc,SAAV,EAF8B;AAGzCJ,EAAAA,MAAM,EAAE;AAHiC,C;;gBAfxBR,c,kBAqB8B;AAC/CI,EAAAA,QAAQ,EAAEP,SAAS,CAACuB;AAD2B,C;;SArB9BpB,c","sourcesContent":["import React from 'react';\nimport PropTypes, { Requireable } from 'prop-types';\nimport vkConnect from '@vkontakte/vk-connect';\nimport { HasChildren } from '../../types/props';\nimport { canUseDOM } from '../../lib/dom';\n\nexport interface ConfigProviderProps extends HasChildren {\n  scheme?: 'client_light' | 'client_dark' | 'bright_light' | 'space_gray';\n  isWebView?: boolean;\n  webviewType?: 'vkapps' | 'internal';\n  app?: string;\n}\n\nexport interface ConfigProviderContext {\n  document: Document;\n}\n\nexport interface ConfigProviderContextType {\n  document: Requireable<{}>;\n}\n\nexport interface ConfigProviderChildContextType {\n  isWebView: Requireable<boolean>;\n  scheme: Requireable<string>;\n  webviewType: Requireable<'vkapps' | 'internal'>;\n  app: Requireable<string>;\n}\n\nexport default class ConfigProvider extends React.Component<ConfigProviderProps> {\n  constructor(props: ConfigProviderProps, context: ConfigProviderContext) {\n    super(props);\n    if (canUseDOM) {\n      this.setScheme((context.document || window.document).body, this.mapOldScheme(props.scheme));\n    }\n  }\n\n  static childContextTypes: ConfigProviderChildContextType = {\n    isWebView: PropTypes.bool,\n    scheme: PropTypes.string,\n    webviewType: PropTypes.oneOf(['vkapps', 'internal']),\n    app: PropTypes.string,\n  };\n\n  static defaultProps: ConfigProviderProps = {\n    webviewType: 'internal',\n    isWebView: vkConnect.isWebView(),\n    scheme: 'bright_light',\n  };\n\n  static contextTypes: ConfigProviderContextType = {\n    document: PropTypes.object,\n  };\n\n  get document(): Document {\n    return this.context.document || window.document;\n  }\n\n  mapOldScheme(scheme: ConfigProviderProps['scheme']) {\n    switch (scheme) {\n      case 'client_light':\n        return 'bright_light';\n      case 'client_dark':\n        return 'space_gray';\n      default:\n        return scheme;\n    }\n  }\n\n  setScheme(target: HTMLElement, scheme: ConfigProviderProps['scheme']) {\n    target.setAttribute('scheme', scheme);\n  }\n\n  componentDidUpdate(prevProps: ConfigProviderProps) {\n    if (prevProps.scheme !== this.props.scheme) {\n      this.setScheme(this.document.body, this.mapOldScheme(this.props.scheme));\n    }\n  }\n\n  getChildContext(): ConfigProviderProps {\n    return {\n      isWebView: this.props.isWebView,\n      webviewType: this.props.webviewType,\n      scheme: this.props.scheme,\n      app: this.props.app,\n    };\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n"],"file":"ConfigProvider.js"}