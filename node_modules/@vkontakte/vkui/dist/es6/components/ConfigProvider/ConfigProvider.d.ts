import React from 'react';
import { Requireable } from 'prop-types';
import { HasChildren } from '../../types/props';
export interface ConfigProviderProps extends HasChildren {
    scheme?: 'client_light' | 'client_dark' | 'bright_light' | 'space_gray';
    isWebView?: boolean;
    webviewType?: 'vkapps' | 'internal';
    app?: string;
}
export interface ConfigProviderContext {
    document: Document;
}
export interface ConfigProviderContextType {
    document: Requireable<{}>;
}
export interface ConfigProviderChildContextType {
    isWebView: Requireable<boolean>;
    scheme: Requireable<string>;
    webviewType: Requireable<'vkapps' | 'internal'>;
    app: Requireable<string>;
}
export default class ConfigProvider extends React.Component<ConfigProviderProps> {
    constructor(props: ConfigProviderProps, context: ConfigProviderContext);
    static childContextTypes: ConfigProviderChildContextType;
    static defaultProps: ConfigProviderProps;
    static contextTypes: ConfigProviderContextType;
    get document(): Document;
    mapOldScheme(scheme: ConfigProviderProps['scheme']): "space_gray" | "bright_light";
    setScheme(target: HTMLElement, scheme: ConfigProviderProps['scheme']): void;
    componentDidUpdate(prevProps: ConfigProviderProps): void;
    getChildContext(): ConfigProviderProps;
    render(): React.ReactNode;
}
